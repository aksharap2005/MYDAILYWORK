import tkinter as tk
from tkinter import *
from tkinter import messagebox

root = Tk()
root.title("To-Do List")
root.geometry("400x650+400+100")
root.resizable(False, False)

task_list = []

# Load tasks from file
def openTaskfile():
    try:
        with open("tasklist.txt", "r") as taskfile:
            tasks = taskfile.readlines()
        for task in tasks:
            task = task.strip()
            if task:
                task_list.append(task)
                listbox.insert(END, task)
    except FileNotFoundError:
        open("tasklist.txt", "w").close()  # Create the file if it doesn't exist

# Add a task
def add_task():
    task = task_entry.get()
    if task != "":
        task_list.append(task)
        listbox.insert(END, task)
        task_entry.delete(0, tk.END)
        with open("tasklist.txt", "a") as taskfile:
            taskfile.write(task + "\n")
    else:
        messagebox.showwarning("Input Error", "Please enter a task.")

# Delete a task
def delete_task():
    try:
        selected_task_index = listbox.curselection()[0]
        task = listbox.get(selected_task_index)
        task_list.remove(task)
        listbox.delete(selected_task_index)
        with open("tasklist.txt", "w") as taskfile:
            for task in task_list:
                taskfile.write(task + "\n")
    except IndexError:
        messagebox.showwarning("Delete Error", "Please select a task to delete.")

# Mark a task as completed
def mark_as_completed():
    try:
        selected_task_index = listbox.curselection()[0]
        task = listbox.get(selected_task_index)
        # Check if it's already marked completed
        if "[Completed]" not in task:
            task_list[selected_task_index] = task + " [Completed]"
            listbox.delete(selected_task_index)
            listbox.insert(selected_task_index, task_list[selected_task_index])
            # Update tasklist.txt
            with open("tasklist.txt", "w") as taskfile:
                for task in task_list:
                    taskfile.write(task + "\n")
        else:
            messagebox.showinfo("Task Completed", "This task is already marked as completed.")
    except IndexError:
        messagebox.showwarning("Selection Error", "Please select a task to mark as completed.")

# icon
Image_icon = PhotoImage(file=r"c:\Users\PC\Downloads\task.png")
root.iconphoto(False, Image_icon)

# top bar
TopImage = PhotoImage(file=r"c:\Users\PC\Downloads\topbar.png")
Label(root, image=TopImage).pack()

dockImage = PhotoImage(file=r"c:\Users\PC\Downloads\dock.png")
Label(root, image=dockImage, bg="#32405b").place(x=30, y=25)

noteImage = PhotoImage(file=r"c:\Users\PC\Downloads\task.png")
Label(root, image=noteImage, bg="#32405b").place(x=30, y=25)

heading = Label(root, text="TO-DO-LIST", font="arial 20 bold", fg="white", bg="#32405b")
heading.place(x=130, y=20)

# main frame
frame = Frame(root, width=400, height=50, bg="white")
frame.place(x=0, y=180)

task_entry = Entry(frame, width=18, font="arial 20", bd=0)
task_entry.place(x=10, y=7)

button = Button(frame, text="ADD", font="arial 20 bold", width=6, bg="#5a95ff", fg="#fff", bd=0, command=add_task)
button.place(x=300, y=0)

# listbox frame
frame1 = Frame(root, bd=3, width=700, height=200, bg="#32405b")
frame1.pack(pady=(160, 0))

listbox = Listbox(frame1, font=('arial', 12), width=40, height=16, bg="#32405b", fg="white", cursor="hand2", selectbackground="#5a95ff")
listbox.pack(side=LEFT, fill=BOTH, padx=2)
scrollbar = Scrollbar(frame1)
scrollbar.pack(side=RIGHT, fill=BOTH)

listbox.config(yscrollcommand=scrollbar.set)
scrollbar.config(command=listbox.yview)

# Add the buttons to a separate frame to control their layout
button_frame = Frame(root)
button_frame.pack(side=BOTTOM, pady=20)

# Mark as Completed button
completed_button = Button(button_frame, text="Mark as Completed", font="arial 12 bold", bg="#5a95ff", fg="white", command=mark_as_completed)
completed_button.pack(side=LEFT, padx=10)

# delete button
Delete_icon = PhotoImage(file=r"c:\Users\PC\Downloads\delete.png")
delete_button = Button(button_frame, image=Delete_icon, bd=0, command=delete_task)
delete_button.pack(side=RIGHT, padx=10)

# Load tasks from file
openTaskfile()

root.mainloop()
